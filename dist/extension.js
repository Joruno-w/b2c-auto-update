(()=>{var e={12:(e,t,s)=>{const n=s(398),a=s(896),r=s(928),o=s(23).promisify(s(317).exec);async function i(e,t,s){const n=r.join(e,"package.json"),o=JSON.parse(a.readFileSync(n,"utf8"));o.dependencies&&o.dependencies[t]?o.dependencies[t]=s:o.devDependencies&&o.devDependencies[t]&&(o.devDependencies[t]=s),a.writeFileSync(n,JSON.stringify(o,null,2))}async function c(e,t,s){try{if(s.isCancellationRequested)throw new Error("操作已取消");if(await async function(e){try{const t=r.join(e,".nvmrc");if(a.existsSync(t)){const e=a.readFileSync(t,"utf8").trim(),s=(await o("node -v")).stdout.trim();e.match(/v?(\d+)/)[1]!==s.match(/v?(\d+)/)[1]&&await o(`nvm use ${e}`)}}catch(e){throw new Error(`Node版本切换失败: ${e.message}`)}}(e),s.isCancellationRequested)throw new Error("操作已取消");const n=await async function(e){const t={"package-lock.json":"npm","yarn.lock":"yarn","pnpm-lock.yaml":"pnpm"};for(const[s,n]of Object.entries(t))if(a.existsSync(r.join(e,s)))return n;return"npm"}(e);for(const n of t){if(s.isCancellationRequested)throw new Error("操作已取消");const[t,a]=n.split("@").filter(Boolean);await i(e,t,a)}if(s.isCancellationRequested)throw new Error("操作已取消");const c={npm:"npm install",yarn:"yarn install",pnpm:"pnpm install"}[n];if(await o(c,{cwd:e}),s.isCancellationRequested)throw new Error("操作已取消");return await o("git add .",{cwd:e}),await o('git commit -m "feat: 更新依赖"',{cwd:e}),await o("git push",{cwd:e}),!0}catch(e){if("操作已取消"===e.message)throw e;throw new Error(`更新失败: ${e.message}`)}}class d extends n.TreeItem{constructor(e,t,s){super("",n.TreeItemCollapsibleState.None),this.path=t,this.contextValue="project",this.tooltip=t,this.provider=s,this.projectName=r.basename(t),this.selected=!1,this.command={title:"Toggle Selection",command:"dependency-updater.toggleProject",arguments:[this]},this.updateBranchInfo()}async updateBranchInfo(){const e=await async function(e){try{const{stdout:t}=await o("git rev-parse --abbrev-ref HEAD",{cwd:e});return t.trim()}catch(e){return null}}(this.path);e?(this.iconPath=new n.ThemeIcon(this.selected?"check":"git-branch"),this.label=this.projectName,this.description=`on ${e}`,this.selected?(this.resourceUri=n.Uri.parse(`project-selected:${this.projectName}`),this.iconPath=new n.ThemeIcon("check",new n.ThemeColor("gitDecoration.addedResourceForeground"))):this.resourceUri=n.Uri.parse(`project:${this.projectName}`)):(this.iconPath=new n.ThemeIcon(this.selected?"check":"folder"),this.label=this.projectName,this.description="",this.selected&&(this.resourceUri=n.Uri.parse(`project-selected:${this.projectName}`),this.iconPath=new n.ThemeIcon("check",new n.ThemeColor("gitDecoration.deletedResourceForeground")))),this.provider&&this.provider.refresh()}toggleSelection(){this.selected=!this.selected,this.updateBranchInfo()}}class h extends n.TreeItem{constructor(){super("暂无项目，请点击右上角按钮选择项目文件夹",n.TreeItemCollapsibleState.None),this.iconPath=new n.ThemeIcon("folder-library")}}class l{constructor(){this._onDidChangeTreeData=new n.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this.projects=[]}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(){return 0===this.projects.length?[new h]:this.projects}async setProjects(e){try{this.projects=[];const t=a.readdirSync(e);for(const s of t){const t=r.join(e,s);if(a.statSync(t).isDirectory()){const e=r.join(t,"package.json");if(a.existsSync(e)){const e=new d(s,t,this);this.projects.push(e)}}}await n.commands.executeCommand("setContext","dependency-updater:hasProjects",this.projects.length>0),this.refresh(),0===this.projects.length&&n.window.showInformationMessage("未找到包含 package.json 的项目")}catch(e){n.window.showErrorMessage(`读取文件夹失败: ${e.message}`)}}clearProjects(){this.projects=[],n.commands.executeCommand("setContext","dependency-updater:hasProjects",!1),this.refresh()}getSelectedProjects(){return this.projects.filter((e=>e.selected))}}class p extends n.TreeItem{constructor(e,t){super(e,n.TreeItemCollapsibleState.None),this.iconPath=new n.ThemeIcon("package"),this.contextValue="package",this.index=t}}class m{constructor(){this._onDidChangeTreeData=new n.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this.packages=[]}getTreeItem(e){return e}getChildren(){return 0===this.packages.length?[]:this.packages.map(((e,t)=>new p(e,t)))}addPackage(e){this.packages.push(e),this._onDidChangeTreeData.fire()}editPackage(e,t){this.packages[e]=t,this._onDidChangeTreeData.fire()}deletePackage(e){this.packages.splice(e,1),this._onDidChangeTreeData.fire()}clearPackages(){this.packages=[],this._onDidChangeTreeData.fire()}}e.exports={activate:async function(e){const t=new l,s=new m,a=[n.commands.registerCommand("dependency-updater.addPackage",(async()=>{const e=await n.window.showInputBox({placeHolder:"输入包名@版本号，例如：lodash@4.17.21",validateInput:e=>e.includes("@")?null:"请按照 包名@版本号 的格式输入"});e&&s.addPackage(e)})),n.commands.registerCommand("dependency-updater.selectFolder",(async()=>{const e=await n.window.showOpenDialog({canSelectFolders:!0,canSelectFiles:!1,canSelectMany:!1,title:"选择项目根目录"});e&&e[0]&&t.setProjects(e[0].fsPath)})),n.commands.registerCommand("dependency-updater.clearProjects",(()=>{t.clearProjects()})),n.commands.registerCommand("dependency-updater.editPackage",(async e=>{const t=await n.window.showInputBox({value:e.label,placeHolder:"输入包名@版本号，例如：lodash@4.17.21",validateInput:e=>e.includes("@")?null:"请按照 包名@版本号 的格式输入"});t&&s.editPackage(e.index,t)})),n.commands.registerCommand("dependency-updater.deletePackage",(e=>{s.deletePackage(e.index)})),n.commands.registerCommand("dependency-updater.clearPackages",(()=>{s.clearPackages()})),n.commands.registerCommand("dependency-updater.toggleProject",(e=>{e instanceof d&&(e.toggleSelection(),t.refresh())})),n.commands.registerCommand("dependency-updater.updateDependencies",(async()=>{const e=t.getSelectedProjects(),a=s.packages;if(e.length){if(a.length)return n.window.withProgress({location:n.ProgressLocation.Notification,title:"批量更新依赖",cancellable:!0},(async(t,s)=>{try{const r=e.length;for(let o=0;o<r;o++){if(s.isCancellationRequested)return void n.window.showInformationMessage("已取消更新操作");const i=e[o];t.report({message:`正在更新「${i.projectName}」(${o+1}/${r})`,increment:100/r}),await c(i.path,a,s)}n.window.showInformationMessage(`成功更新 ${r} 个项目`)}catch(e){"操作已取消"===e.message?n.window.showInformationMessage("已取消更新操作"):n.window.showErrorMessage(`批量更新失败: ${e.message}`)}}));n.window.showInformationMessage("请添加要更新的依赖包")}else n.window.showInformationMessage("请选择要更新的项目")})),n.commands.registerCommand("dependency-updater.updateProject",(async e=>{if(!(e instanceof d))return;const t=s.packages;if(t.length)return n.window.withProgress({location:n.ProgressLocation.Notification,title:`正在更新项目「${e.projectName}」`,cancellable:!0},(async(s,a)=>{try{await c(e.path,t,a),n.window.showInformationMessage(`项目「${e.projectName}」更新完成`)}catch(e){"操作已取消"===e.message?n.window.showInformationMessage("已取消更新操作"):n.window.showErrorMessage(e.message)}}));n.window.showInformationMessage("请先添加要更新的包")}))],r=[n.window.createTreeView("packageInputView",{treeDataProvider:s,showCollapseAll:!0}),n.window.createTreeView("dependencyUpdaterView",{treeDataProvider:t,showCollapseAll:!0})];e.subscriptions.push(...a,...r),await n.commands.executeCommand("setContext","dependency-updater:hasProjects",!1)}}},398:e=>{"use strict";e.exports=require("vscode")},317:e=>{"use strict";e.exports=require("child_process")},896:e=>{"use strict";e.exports=require("fs")},928:e=>{"use strict";e.exports=require("path")},23:e=>{"use strict";e.exports=require("util")}},t={},s=function s(n){var a=t[n];if(void 0!==a)return a.exports;var r=t[n]={exports:{}};return e[n](r,r.exports,s),r.exports}(12);module.exports=s})();