{"version":3,"file":"extension.js","mappings":";;;;;;;;;AAAA,eAAe,mBAAO,CAAC,sBAAQ;AAC/B,WAAW,mBAAO,CAAC,cAAI;AACvB,aAAa,mBAAO,CAAC,kBAAM;AAC3B,aAAa,mBAAO,CAAC,kBAAM;AAC3B,QAAQ,kBAAkB,EAAE,mBAAO,CAAC,oCAAe;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,mBAAmB;AAC/C,mCAAmC,UAAU,eAAe,eAAe;AAC3E,0BAA0B;AAC1B;;AAEA;AACA;AACA,0CAA0C,QAAQ,GAAG,iBAAiB;;AAEtE;AACA,4BAA4B,qBAAqB;AACjD,6DAA6D,kBAAkB;AAC/E,kBAAkB;AAClB;AACA;AACA;AACA;AACA,MAAM;AACN,4CAA4C,cAAc;AAC1D;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,SAAS,yCAAyC,kBAAkB;AACpF;AACA,MAAM;AACN;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gCAAgC,eAAe;AAC/C,8BAA8B,eAAe;AAC7C,8BAA8B,eAAe;AAC7C,SAAS;;AAET;AACA;AACA;AACA;;AAEA,iCAAiC,kBAAkB;;AAEnD;AACA;AACA;AACA,sCAAsC,kBAAkB;AACxD,mEAAmE,kBAAkB;AACrF;AACA,iCAAiC,kBAAkB;;AAEnD;AACA,MAAM;AACN;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;;AAEA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA,SAAS;AACT;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qCAAqC,OAAO;;AAE5C;AACA;AACA,wEAAwE,iBAAiB;AACzF;AACA,cAAc;AACd,+DAA+D,iBAAiB;AAChF;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA,wEAAwE,iBAAiB;AACzF;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV,uDAAuD,cAAc;AACrE;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,oCAAoC,WAAW;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA,6CAA6C,oBAAoB,IAAI,MAAM,GAAG,MAAM;AACpF;AACA,yBAAyB;;AAEzB;AACA;;AAEA,iEAAiE,OAAO;AACxE,kBAAkB;AAClB;AACA;AACA,sBAAsB;AACtB,kEAAkE,cAAc;AAChF;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,iBAAiB;AAClD;AACA,aAAa;AACb;AACA;AACA,+DAA+D,iBAAiB;AAChF,kBAAkB;AAClB;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;ACvdA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://dependency-updater/./extension.js","webpack://dependency-updater/external commonjs \"vscode\"","webpack://dependency-updater/external node-commonjs \"child_process\"","webpack://dependency-updater/external node-commonjs \"fs\"","webpack://dependency-updater/external node-commonjs \"path\"","webpack://dependency-updater/external node-commonjs \"util\"","webpack://dependency-updater/webpack/bootstrap","webpack://dependency-updater/webpack/before-startup","webpack://dependency-updater/webpack/startup","webpack://dependency-updater/webpack/after-startup"],"sourcesContent":["const vscode = require('vscode');\nconst fs = require('fs');\nconst path = require('path');\nconst util = require('util');\nconst { spawn, exec: ex } = require('child_process');\nconst exec = util.promisify(ex);\n\n// 获取包管理器类型\nasync function getPackageManager(projectPath) {\n    const lockFiles = {\n        'pnpm-lock.yaml': 'pnpm',\n        'yarn.lock': 'yarn',\n        'package-lock.json': 'npm',\n    };\n\n    for (const [file, manager] of Object.entries(lockFiles)) {\n        if (fs.existsSync(path.join(projectPath, file))) {\n            return manager;\n        }\n    }\n    return 'npm'; // 默认使用 npm\n}\n\n// 检查并切换 Node 版本\nasync function switchNodeVersion(projectPath) {\n    try {\n        const nvmrcPath = path.join(projectPath, '.nvmrc');\n        if (fs.existsSync(nvmrcPath)) {\n            const requiredVersion = fs.readFileSync(nvmrcPath, 'utf8').trim();\n            const currentVersion = (await exec('node -v')).stdout.trim();\n\n            const requiredMajor = requiredVersion.match(/v?(\\d+)/)[1];\n            const currentMajor = currentVersion.match(/v?(\\d+)/)[1];\n\n            if (requiredMajor !== currentMajor) {\n                // 获取 NVM 的安装路径\n                const home = process.env.HOME || process.env.USERPROFILE;\n                const nvmScript = path.join(home, '.nvm/nvm.sh');\n\n                if (fs.existsSync(nvmScript)) {\n                    // 获取新版本的 node 路径\n                    const { stdout: nodePath } = await exec(\n                        `source \"${nvmScript}\" && nvm use ${requiredMajor} > /dev/null && which node`,\n                        { shell: '/bin/bash' }\n                    );\n\n                    // 更新 PATH 环境变量，将新的 node 版本路径放在最前面\n                    const nodeDir = path.dirname(nodePath.trim());\n                    process.env.PATH = `${nodeDir}:${process.env.PATH}`;\n\n                    // 验证版本切换\n                    const { stdout: newVersion } = await exec('node -v');\n                    console.log(`Node version switched to: ${newVersion.trim()}`);\n                } else {\n                    console.warn('未找到 nvm 安装，跳过 Node 版本切换');\n                }\n            }\n        }\n    } catch (error) {\n        console.warn(`Node版本切换失败 (非致命错误): ${error.message}`);\n    }\n}\n\n// 添加检查工作区状态函数\nasync function isWorkingTreeClean(projectPath) {\n    try {\n        const { stdout } = await exec('git status --porcelain', { cwd: projectPath });\n        return stdout.trim() === '';\n    } catch (error) {\n        return false;\n    }\n}\n\n\nasync function updateProjectDependencies(projectPath, packages, token) {\n    try {\n        if (token.isCancellationRequested) {\n            throw new Error('操作已取消');\n        }\n\n        // 切换 Node 版本\n        await switchNodeVersion(projectPath);\n\n        if (token.isCancellationRequested) {\n            throw new Error('操作已取消');\n        }\n\n        // 获取包管理器\n        const packageManager = await getPackageManager(projectPath);\n\n        // 构建单个安装命令，包含所有依赖\n        const packagesString = packages.join(' ');\n        const installCmd = {\n            npm: `npm install ${packagesString}`,\n            yarn: `yarn add ${packagesString}`,\n            pnpm: `pnpm add ${packagesString}`\n        }[packageManager];\n\n        // 执行安装\n        if (token.isCancellationRequested) {\n            throw new Error('操作已取消');\n        }\n\n        await exec(installCmd, { cwd: projectPath });\n\n        // Git 操作\n        const isClean = await isWorkingTreeClean(projectPath);\n        if (!isClean) {\n            await exec('git add .', { cwd: projectPath });\n            await exec('git commit -m \"feat: 更新依赖\" --no-verify', { cwd: projectPath });\n        }\n        await exec('git push', { cwd: projectPath });\n\n        return true;\n    } catch (error) {\n        if (error.message === '操作已取消') {\n            throw error;\n        }\n        throw new Error(`更新失败: ${error.message}`);\n    }\n}\n\nasync function getGitBranch(projectPath) {\n    try {\n        const { stdout } = await exec('git rev-parse --abbrev-ref HEAD', {\n            cwd: projectPath\n        });\n        return stdout.trim();\n    } catch (error) {\n        return null;\n    }\n}\n\nclass ProjectItem extends vscode.TreeItem {\n    constructor(label, projectPath, provider) {\n        super('', vscode.TreeItemCollapsibleState.None);\n        this.path = projectPath;\n        this.contextValue = 'project';\n        this.tooltip = projectPath;\n        this.provider = provider;\n        this.projectName = path.basename(projectPath);\n        this.selected = false;\n\n        // 添加点击命令\n        this.command = {\n            title: 'Toggle Selection',\n            command: 'dependency-updater.toggleProject',\n            arguments: [this]\n        };\n\n        this.updateBranchInfo();\n    }\n\n    async updateBranchInfo() {\n        const branch = await getGitBranch(this.path);\n        if (branch) {\n            this.iconPath = new vscode.ThemeIcon(this.selected ? 'check' : 'git-branch');\n            this.label = this.projectName;\n            this.description = `on ${branch}`;\n\n            // 分支名用绿色\n            if (this.selected) {\n                this.resourceUri = vscode.Uri.parse(`project-selected:${this.projectName}`);\n                this.iconPath = new vscode.ThemeIcon('check', new vscode.ThemeColor('gitDecoration.addedResourceForeground'));\n            } else {\n                this.resourceUri = vscode.Uri.parse(`project:${this.projectName}`);\n            }\n        } else {\n            // 文件名用红色\n            this.iconPath = new vscode.ThemeIcon(this.selected ? 'check' : 'folder');\n            this.label = this.projectName;\n            this.description = '';\n\n            if (this.selected) {\n                this.resourceUri = vscode.Uri.parse(`project-selected:${this.projectName}`);\n                this.iconPath = new vscode.ThemeIcon('check', new vscode.ThemeColor('gitDecoration.deletedResourceForeground'));\n            }\n        }\n\n        if (this.provider) {\n            this.provider.refresh();\n        }\n    }\n\n    toggleSelection() {\n        this.selected = !this.selected;\n        this.updateBranchInfo();\n    }\n}\n\nclass NoProjectsItem extends vscode.TreeItem {\n    constructor() {\n        super('暂无项目，请点击右上角按钮选择项目文件夹', vscode.TreeItemCollapsibleState.None);\n        this.iconPath = new vscode.ThemeIcon('folder-library');\n    }\n}\n\nclass DependencyUpdaterProvider {\n    constructor() {\n        this._onDidChangeTreeData = new vscode.EventEmitter();\n        this.onDidChangeTreeData = this._onDidChangeTreeData.event;\n        this.projects = [];\n    }\n\n    refresh() {\n        this._onDidChangeTreeData.fire();\n    }\n\n    getTreeItem(element) {\n        return element;\n    }\n\n    getChildren() {\n        if (this.projects.length === 0) {\n            return [new NoProjectsItem()];\n        }\n        return this.projects;\n    }\n\n    async setProjects(folderPath) {\n        try {\n            this.projects = [];\n            const items = fs.readdirSync(folderPath);\n\n            for (const item of items) {\n                const itemPath = path.join(folderPath, item);\n                if (fs.statSync(itemPath).isDirectory()) {\n                    const packageJsonPath = path.join(itemPath, 'package.json');\n                    if (fs.existsSync(packageJsonPath)) {\n                        // 传入 provider 实例以便刷新\n                        const projectItem = new ProjectItem(item, itemPath, this);\n                        this.projects.push(projectItem);\n                    }\n                }\n            }\n\n            // 更新视图状态\n            await vscode.commands.executeCommand('setContext', 'dependency-updater:hasProjects', this.projects.length > 0);\n\n            this.refresh();\n            if (this.projects.length === 0) {\n                vscode.window.showInformationMessage('未找到包含 package.json 的项目');\n            }\n        } catch (error) {\n            vscode.window.showErrorMessage(`读取文件夹失败: ${error.message}`);\n        }\n    }\n\n    clearProjects() {\n        this.projects = [];\n        vscode.commands.executeCommand('setContext', 'dependency-updater:hasProjects', false);\n        this.refresh();\n    }\n\n    getSelectedProjects() {\n        return this.projects.filter(project => project.selected);\n    }\n}\n\nclass PackageInfoItem extends vscode.TreeItem {\n    constructor(packageInfo, index) {\n        super(packageInfo, vscode.TreeItemCollapsibleState.None);\n        this.iconPath = new vscode.ThemeIcon('package');\n        this.contextValue = 'package';\n        this.index = index;\n    }\n}\n\nclass PackageInputProvider {\n    constructor() {\n        this._onDidChangeTreeData = new vscode.EventEmitter();\n        this.onDidChangeTreeData = this._onDidChangeTreeData.event;\n        this.packages = [];\n    }\n\n    getTreeItem(element) {\n        return element;\n    }\n\n    getChildren() {\n        return this.packages.length === 0\n            ? []\n            : this.packages.map((pkg, index) => new PackageInfoItem(pkg, index));\n    }\n\n    addPackage(info) {\n        this.packages.push(info);\n        this._onDidChangeTreeData.fire();\n    }\n\n    editPackage(index, info) {\n        this.packages[index] = info;\n        this._onDidChangeTreeData.fire();\n    }\n\n    deletePackage(index) {\n        this.packages.splice(index, 1);\n        this._onDidChangeTreeData.fire();\n    }\n\n    clearPackages() {\n        this.packages = [];\n        this._onDidChangeTreeData.fire();\n    }\n}\n\nasync function activate(context) {\n    const provider = new DependencyUpdaterProvider();\n    const inputProvider = new PackageInputProvider();\n\n    // 先注册所有命令\n    const commands = [\n        vscode.commands.registerCommand('dependency-updater.addPackage', async () => {\n            const result = await vscode.window.showInputBox({\n                placeHolder: '输入包名@版本号，例如：lodash@4.17.21',\n                validateInput: text => {\n                    return text.includes('@') ? null : '请按照 包名@版本号 的格式输入';\n                }\n            });\n\n            if (result) {\n                inputProvider.addPackage(result);\n            }\n        }),\n        vscode.commands.registerCommand('dependency-updater.selectFolder', async () => {\n            const result = await vscode.window.showOpenDialog({\n                canSelectFolders: true,\n                canSelectFiles: false,\n                canSelectMany: false,\n                title: '选择项目根目录'\n            });\n\n            if (result && result[0]) {\n                provider.setProjects(result[0].fsPath);\n            }\n        }),\n\n        vscode.commands.registerCommand('dependency-updater.clearProjects', () => {\n            provider.clearProjects();\n        }),\n\n        vscode.commands.registerCommand('dependency-updater.editPackage', async (item) => {\n            const result = await vscode.window.showInputBox({\n                value: item.label,\n                placeHolder: '输入包名@版本号，例如：lodash@4.17.21',\n                validateInput: text => {\n                    return text.includes('@') ? null : '请按照 包名@版本号 的格式输入';\n                }\n            });\n\n            if (result) {\n                inputProvider.editPackage(item.index, result);\n            }\n        }),\n\n        vscode.commands.registerCommand('dependency-updater.deletePackage', (item) => {\n            inputProvider.deletePackage(item.index);\n        }),\n\n        vscode.commands.registerCommand('dependency-updater.clearPackages', () => {\n            inputProvider.clearPackages();\n        }),\n\n        vscode.commands.registerCommand('dependency-updater.toggleProject', (item) => {\n            if (item instanceof ProjectItem) {\n                item.toggleSelection();\n                provider.refresh();\n            }\n        }),\n\n        // 添加更新依赖命令\n        vscode.commands.registerCommand('dependency-updater.updateDependencies', async () => {\n            const selectedProjects = provider.getSelectedProjects();\n            const packages = inputProvider.packages;\n\n            // 检查是否有选中的项目和包\n            if (!selectedProjects.length) {\n                vscode.window.showInformationMessage('请选择要更新的项目');\n                return;\n            }\n\n            if (!packages.length) {\n                vscode.window.showInformationMessage('请添加要更新的依赖包');\n                return;\n            }\n\n            // 显示更新进度\n            return vscode.window.withProgress({\n                location: vscode.ProgressLocation.Notification,\n                title: \"批量更新依赖\",\n                cancellable: true  // 启用取消功能\n            }, async (progress, token) => {\n                try {\n                    const total = selectedProjects.length;\n                    for (let i = 0; i < total; i++) {\n                        if (token.isCancellationRequested) {\n                            vscode.window.showInformationMessage('已取消更新操作');\n                            return;\n                        }\n\n                        const project = selectedProjects[i];\n                        progress.report({\n                            message: `正在更新「${project.projectName}」(${i + 1}/${total})`,\n                            increment: (100 / total)\n                        });\n\n                        await updateProjectDependencies(project.path, packages, token);\n                    }\n\n                    vscode.window.showInformationMessage(`成功更新 ${total} 个项目`);\n                } catch (error) {\n                    if (error.message === '操作已取消') {\n                        vscode.window.showInformationMessage('已取消更新操作');\n                    } else {\n                        vscode.window.showErrorMessage(`批量更新失败: ${error.message}`);\n                    }\n                }\n            });\n        }),\n\n        vscode.commands.registerCommand('dependency-updater.updateProject', async (item) => {\n            if (!(item instanceof ProjectItem)) {\n                return;\n            }\n\n            const packages = inputProvider.packages;\n            if (!packages.length) {\n                vscode.window.showInformationMessage('请先添加要更新的包');\n                return;\n            }\n\n            return vscode.window.withProgress({\n                location: vscode.ProgressLocation.Notification,\n                title: `正在更新项目「${item.projectName}」`,\n                cancellable: true  // 启用取消功能\n            }, async (progress, token) => {\n                try {\n                    await updateProjectDependencies(item.path, packages, token);\n                    vscode.window.showInformationMessage(`项目「${item.projectName}」更新完成`);\n                } catch (error) {\n                    if (error.message === '操作已取消') {\n                        vscode.window.showInformationMessage('已取消更新操作');\n                    } else {\n                        vscode.window.showErrorMessage(error.message);\n                    }\n                }\n            });\n        })\n    ];\n\n    // 然后注册视图\n    const views = [\n        vscode.window.createTreeView('packageInputView', {\n            treeDataProvider: inputProvider,\n            showCollapseAll: true\n        }),\n        vscode.window.createTreeView('dependencyUpdaterView', {\n            treeDataProvider: provider,\n            showCollapseAll: true\n        })\n    ];\n\n    // 添加到订阅列表\n    context.subscriptions.push(...commands, ...views);\n\n    // 初始化上下文状态\n    await vscode.commands.executeCommand('setContext', 'dependency-updater:hasProjects', false);\n}\n\nmodule.exports = {\n    activate\n};\n\n","module.exports = require(\"vscode\");","module.exports = require(\"child_process\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","module.exports = require(\"util\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./extension.js\");\n",""],"names":[],"sourceRoot":""}